#include <string>
#pragma once

// FSA states
const int NUM_FSA_STATES = 13;

enum class FSA_STATE {
	HALT, START, CMNT, ERR, ID, INT, DECPT, FRAC, SLIT, SLITQ, GTHAN, LTHAN, DOT
};

const std::string FSA_STATE_STR[NUM_FSA_STATES] = {
	"HALT", "START", "CMNT", "ERR", "ID", "INT", "DECPT", "FRAC", "SLIT", "SLITQ",
	"GTHAN", "LTHAN", "DOT"
};


// FSA character categories
const int NUM_CHAR_CATS = 18;
enum class CHAR_CAT {
	UNKNOWN, ANY, WHITESP, EOFL, EOL, LBRACE, RBRACE, ALPHA, DIGIT, UNDERSC, DOTC,
	QUOTE, GTHANC, LTHANC, COLON, EQUAL, SYMBOL, OTHER
};

const std::string CHAR_CAT_STR[NUM_CHAR_CATS] = {
	"UNKNOWN", "ANY", "WHITESP", "EOFL", "EOL", "LBRACE", "RBRACE", "ALPHA", "DIGIT",
	"UNDERSC", "DOTC","QUOTE", "GTHANC", "LTHANC", "COLON", "EQUAL", "SYMBOL", "OTHER"
};


// FSA actions
enum class ACTION { KEEP, DISC, PUTB };
const int NUM_FSA_ACTIONS = 3;
const std::string ACTION_STR[NUM_FSA_ACTIONS] = { "KEEP","DISC","PUTB" };

// A Transition between two states based on a character category and look ahead,
// specifying the TO state and the action to take with the character
class transition {
public:
	FSA_STATE from;
	FSA_STATE to;
	CHAR_CAT  ccat;
	CHAR_CAT  la;
	ACTION    act;
};

// FSA Transitions
const int NUM_FSA_TRANS = 41;
const transition trans[NUM_FSA_TRANS] = {
	{ FSA_STATE::START,     FSA_STATE::START,   CHAR_CAT::WHITESP,  CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::START,     FSA_STATE::START,   CHAR_CAT::EOL,      CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::START,     FSA_STATE::HALT,    CHAR_CAT::EOFL,     CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::START,     FSA_STATE::CMNT,    CHAR_CAT::LBRACE,   CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::CMNT,      FSA_STATE::ERR,     CHAR_CAT::EOFL,     CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::CMNT,      FSA_STATE::START,   CHAR_CAT::RBRACE,   CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::CMNT,      FSA_STATE::CMNT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::DISC },
	{ FSA_STATE::START,     FSA_STATE::ID,      CHAR_CAT::ALPHA,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::ID,        FSA_STATE::ID,      CHAR_CAT::ALPHA,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::ID,        FSA_STATE::ID,      CHAR_CAT::DIGIT,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::ID,        FSA_STATE::ID,      CHAR_CAT::UNDERSC,  CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::ID,        FSA_STATE::HALT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::PUTB },
	{ FSA_STATE::START,     FSA_STATE::INT,     CHAR_CAT::DIGIT,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::INT,       FSA_STATE::INT,     CHAR_CAT::DIGIT,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::INT,       FSA_STATE::HALT,    CHAR_CAT::DOTC,     CHAR_CAT::DOTC,   ACTION::PUTB },
	{ FSA_STATE::INT,       FSA_STATE::DECPT,   CHAR_CAT::DOTC,     CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::INT,       FSA_STATE::HALT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::PUTB },
	{ FSA_STATE::DECPT,     FSA_STATE::FRAC,    CHAR_CAT::DIGIT,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::DECPT,     FSA_STATE::ERR,     CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::FRAC,      FSA_STATE::FRAC,    CHAR_CAT::DIGIT,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::FRAC,      FSA_STATE::HALT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::PUTB },
	{ FSA_STATE::START,     FSA_STATE::SLIT,    CHAR_CAT::QUOTE,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::SLIT,      FSA_STATE::SLITQ,   CHAR_CAT::QUOTE,    CHAR_CAT::QUOTE,  ACTION::KEEP },
	{ FSA_STATE::SLIT,      FSA_STATE::HALT,    CHAR_CAT::QUOTE,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::SLIT,      FSA_STATE::ERR,     CHAR_CAT::EOFL,     CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::SLIT,      FSA_STATE::ERR,     CHAR_CAT::EOL,      CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::SLIT,      FSA_STATE::SLIT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::SLITQ,     FSA_STATE::SLIT,    CHAR_CAT::QUOTE,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::START,     FSA_STATE::GTHAN,   CHAR_CAT::GTHANC,   CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::GTHAN,     FSA_STATE::HALT,    CHAR_CAT::EQUAL,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::GTHAN,     FSA_STATE::HALT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::PUTB },
	{ FSA_STATE::START,     FSA_STATE::GTHAN,   CHAR_CAT::COLON,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::START,     FSA_STATE::LTHAN,   CHAR_CAT::LTHANC,   CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::LTHAN,     FSA_STATE::HALT,    CHAR_CAT::EQUAL,    CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::LTHAN,     FSA_STATE::HALT,    CHAR_CAT::GTHANC,   CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::LTHAN,     FSA_STATE::HALT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::PUTB },
	{ FSA_STATE::START,     FSA_STATE::DOT,     CHAR_CAT::DOTC,     CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::DOT,       FSA_STATE::HALT,    CHAR_CAT::DOTC,     CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::DOT,       FSA_STATE::HALT,    CHAR_CAT::ANY,      CHAR_CAT::ANY,    ACTION::PUTB },
	{ FSA_STATE::START,     FSA_STATE::HALT,    CHAR_CAT::SYMBOL,   CHAR_CAT::ANY,    ACTION::KEEP },
	{ FSA_STATE::START,     FSA_STATE::HALT,    CHAR_CAT::EQUAL,    CHAR_CAT::ANY,    ACTION::KEEP },
};
